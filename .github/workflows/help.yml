# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: help

on:
    workflow_dispatch:
    schedule:
        - cron: '55 21 * * *'
    watch:
        types: started
    repository_dispatch:
        types: help
jobs:
    jd_plantBean_help:
        runs-on: ubuntu-latest
        if: github.event.repository.owner.id == github.event.sender.id
        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - name: Use Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v1
              with:
                  node-version: ${{ matrix.node-version }}
            - name: Cache node_modules
              uses: actions/cache@v2 # 使用 GitHub 官方的缓存 Action。
              env:
                  cache-name: cache-node-modules
              with:
                  path: node_modules
                  key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('package-lock.json') }} # 使用 package-lock.json 的 Hash 作为缓存的 key。也可以使用 package.json 代替
            - name: npm install
              run: |
                  npm install
            - name: '运行 【种豆得豆助力】'
              run: |
                  cd ./scripts
                  node jd_plantBean_help.js
              env:
                  JD_COOKIE: ${{ secrets.JD_COOKIE }}
                  DREAM_FACTORY_SHARE_CODES: ${{ secrets.DREAM_FACTORY_SHARE_CODES }}
                  FRUITSHARECODES: ${{ secrets.FRUITSHARECODES }}
                  PETSHARECODES: ${{ secrets.PETSHARECODES }}
                  PLANT_BEAN_SHARECODES: ${{ secrets.PLANT_BEAN_SHARECODES }}
    jd_pet_help:
        runs-on: ubuntu-latest
        if: github.event.repository.owner.id == github.event.sender.id
        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - name: Use Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v1
              with:
                  node-version: ${{ matrix.node-version }}
            - name: Cache node_modules
              uses: actions/cache@v2 # 使用 GitHub 官方的缓存 Action。
              env:
                  cache-name: cache-node-modules
              with:
                  path: node_modules
                  key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('package-lock.json') }} # 使用 package-lock.json 的 Hash 作为缓存的 key。也可以使用 package.json 代替
            - name: npm install
              run: |
                  npm install
            - name: '运行 【东东萌宠助力】'
              run: |
                  cd ./scripts
                  node jd_pet_help.js
              env:
                  JD_COOKIE: ${{ secrets.JD_COOKIE }}
                  DREAM_FACTORY_SHARE_CODES: ${{ secrets.DREAM_FACTORY_SHARE_CODES }}
                  FRUITSHARECODES: ${{ secrets.FRUITSHARECODES }}
                  PETSHARECODES: ${{ secrets.PETSHARECODES }}
                  PLANT_BEAN_SHARECODES: ${{ secrets.PLANT_BEAN_SHARECODES }}
    jd_fruit_help:
        runs-on: ubuntu-latest
        if: github.event.repository.owner.id == github.event.sender.id
        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - name: Use Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v1
              with:
                  node-version: ${{ matrix.node-version }}
            - name: Cache node_modules
              uses: actions/cache@v2 # 使用 GitHub 官方的缓存 Action。
              env:
                  cache-name: cache-node-modules
              with:
                  path: node_modules
                  key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('package-lock.json') }} # 使用 package-lock.json 的 Hash 作为缓存的 key。也可以使用 package.json 代替
            - name: npm install
              run: |
                  npm install
            - name: '运行 【东东农场助力】'
              run: |
                  cd ./scripts
                  node jd_fruit_help.js
              env:
                  JD_COOKIE: ${{ secrets.JD_COOKIE }}
                  DREAM_FACTORY_SHARE_CODES: ${{ secrets.DREAM_FACTORY_SHARE_CODES }}
                  FRUITSHARECODES: ${{ secrets.FRUITSHARECODES }}
                  PETSHARECODES: ${{ secrets.PETSHARECODES }}
                  PLANT_BEAN_SHARECODES: ${{ secrets.PLANT_BEAN_SHARECODES }}
    jd_dreamFactory_help:
        runs-on: ubuntu-latest
        if: github.event.repository.owner.id == github.event.sender.id
        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - name: Use Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v1
              with:
                  node-version: ${{ matrix.node-version }}
            - name: Cache node_modules
              uses: actions/cache@v2 # 使用 GitHub 官方的缓存 Action。
              env:
                  cache-name: cache-node-modules
              with:
                  path: node_modules
                  key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('package-lock.json') }} # 使用 package-lock.json 的 Hash 作为缓存的 key。也可以使用 package.json 代替
            - name: npm install
              run: |
                  npm install
            - name: '运行 【京喜工厂助力】'
              run: |
                  cd ./scripts
                  node jd_dreamFactory_help.js
              env:
                  JD_COOKIE: ${{ secrets.JD_COOKIE }}
                  DREAM_FACTORY_SHARE_CODES: ${{ secrets.DREAM_FACTORY_SHARE_CODES }}
                  FRUITSHARECODES: ${{ secrets.FRUITSHARECODES }}
                  PETSHARECODES: ${{ secrets.PETSHARECODES }}
                  PLANT_BEAN_SHARECODES: ${{ secrets.PLANT_BEAN_SHARECODES }}
